// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	models "ringhover-go/internal/domain/models"

	mock "github.com/stretchr/testify/mock"

	req "ringhover-go/internal/domain/req"

	resp "ringhover-go/internal/domain/resp"
)

// ModelisationServiceInterface is an autogenerated mock type for the ModelisationServiceInterface type
type ModelisationServiceInterface struct {
	mock.Mock
}

type ModelisationServiceInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *ModelisationServiceInterface) EXPECT() *ModelisationServiceInterface_Expecter {
	return &ModelisationServiceInterface_Expecter{mock: &_m.Mock}
}

// CreateTask provides a mock function with given fields: requestTask
func (_m *ModelisationServiceInterface) CreateTask(requestTask req.CreateTaskRequest) (models.Task, error) {
	ret := _m.Called(requestTask)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(req.CreateTaskRequest) (models.Task, error)); ok {
		return rf(requestTask)
	}
	if rf, ok := ret.Get(0).(func(req.CreateTaskRequest) models.Task); ok {
		r0 = rf(requestTask)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	if rf, ok := ret.Get(1).(func(req.CreateTaskRequest) error); ok {
		r1 = rf(requestTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelisationServiceInterface_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type ModelisationServiceInterface_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - requestTask req.CreateTaskRequest
func (_e *ModelisationServiceInterface_Expecter) CreateTask(requestTask interface{}) *ModelisationServiceInterface_CreateTask_Call {
	return &ModelisationServiceInterface_CreateTask_Call{Call: _e.mock.On("CreateTask", requestTask)}
}

func (_c *ModelisationServiceInterface_CreateTask_Call) Run(run func(requestTask req.CreateTaskRequest)) *ModelisationServiceInterface_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(req.CreateTaskRequest))
	})
	return _c
}

func (_c *ModelisationServiceInterface_CreateTask_Call) Return(taskCreated models.Task, err error) *ModelisationServiceInterface_CreateTask_Call {
	_c.Call.Return(taskCreated, err)
	return _c
}

func (_c *ModelisationServiceInterface_CreateTask_Call) RunAndReturn(run func(req.CreateTaskRequest) (models.Task, error)) *ModelisationServiceInterface_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTask provides a mock function with given fields: taskId
func (_m *ModelisationServiceInterface) DeleteTask(taskId uint64) error {
	ret := _m.Called(taskId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uint64) error); ok {
		r0 = rf(taskId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ModelisationServiceInterface_DeleteTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTask'
type ModelisationServiceInterface_DeleteTask_Call struct {
	*mock.Call
}

// DeleteTask is a helper method to define mock.On call
//   - taskId uint64
func (_e *ModelisationServiceInterface_Expecter) DeleteTask(taskId interface{}) *ModelisationServiceInterface_DeleteTask_Call {
	return &ModelisationServiceInterface_DeleteTask_Call{Call: _e.mock.On("DeleteTask", taskId)}
}

func (_c *ModelisationServiceInterface_DeleteTask_Call) Run(run func(taskId uint64)) *ModelisationServiceInterface_DeleteTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ModelisationServiceInterface_DeleteTask_Call) Return(err error) *ModelisationServiceInterface_DeleteTask_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *ModelisationServiceInterface_DeleteTask_Call) RunAndReturn(run func(uint64) error) *ModelisationServiceInterface_DeleteTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetRootTasks provides a mock function with no fields
func (_m *ModelisationServiceInterface) GetRootTasks() (resp.TaskList, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRootTasks")
	}

	var r0 resp.TaskList
	var r1 error
	if rf, ok := ret.Get(0).(func() (resp.TaskList, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() resp.TaskList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resp.TaskList)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelisationServiceInterface_GetRootTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRootTasks'
type ModelisationServiceInterface_GetRootTasks_Call struct {
	*mock.Call
}

// GetRootTasks is a helper method to define mock.On call
func (_e *ModelisationServiceInterface_Expecter) GetRootTasks() *ModelisationServiceInterface_GetRootTasks_Call {
	return &ModelisationServiceInterface_GetRootTasks_Call{Call: _e.mock.On("GetRootTasks")}
}

func (_c *ModelisationServiceInterface_GetRootTasks_Call) Run(run func()) *ModelisationServiceInterface_GetRootTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ModelisationServiceInterface_GetRootTasks_Call) Return(tasksList resp.TaskList, err error) *ModelisationServiceInterface_GetRootTasks_Call {
	_c.Call.Return(tasksList, err)
	return _c
}

func (_c *ModelisationServiceInterface_GetRootTasks_Call) RunAndReturn(run func() (resp.TaskList, error)) *ModelisationServiceInterface_GetRootTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubTasks provides a mock function with given fields: taskID
func (_m *ModelisationServiceInterface) GetSubTasks(taskID uint64) ([]models.Task, error) {
	ret := _m.Called(taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetSubTasks")
	}

	var r0 []models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64) ([]models.Task, error)); ok {
		return rf(taskID)
	}
	if rf, ok := ret.Get(0).(func(uint64) []models.Task); ok {
		r0 = rf(taskID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(uint64) error); ok {
		r1 = rf(taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelisationServiceInterface_GetSubTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubTasks'
type ModelisationServiceInterface_GetSubTasks_Call struct {
	*mock.Call
}

// GetSubTasks is a helper method to define mock.On call
//   - taskID uint64
func (_e *ModelisationServiceInterface_Expecter) GetSubTasks(taskID interface{}) *ModelisationServiceInterface_GetSubTasks_Call {
	return &ModelisationServiceInterface_GetSubTasks_Call{Call: _e.mock.On("GetSubTasks", taskID)}
}

func (_c *ModelisationServiceInterface_GetSubTasks_Call) Run(run func(taskID uint64)) *ModelisationServiceInterface_GetSubTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64))
	})
	return _c
}

func (_c *ModelisationServiceInterface_GetSubTasks_Call) Return(subtasksList []models.Task, err error) *ModelisationServiceInterface_GetSubTasks_Call {
	_c.Call.Return(subtasksList, err)
	return _c
}

func (_c *ModelisationServiceInterface_GetSubTasks_Call) RunAndReturn(run func(uint64) ([]models.Task, error)) *ModelisationServiceInterface_GetSubTasks_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: taskId, requestTask
func (_m *ModelisationServiceInterface) UpdateTask(taskId uint64, requestTask req.UpdateTaskRequest) (models.Task, error) {
	ret := _m.Called(taskId, requestTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 models.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(uint64, req.UpdateTaskRequest) (models.Task, error)); ok {
		return rf(taskId, requestTask)
	}
	if rf, ok := ret.Get(0).(func(uint64, req.UpdateTaskRequest) models.Task); ok {
		r0 = rf(taskId, requestTask)
	} else {
		r0 = ret.Get(0).(models.Task)
	}

	if rf, ok := ret.Get(1).(func(uint64, req.UpdateTaskRequest) error); ok {
		r1 = rf(taskId, requestTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModelisationServiceInterface_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type ModelisationServiceInterface_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - taskId uint64
//   - requestTask req.UpdateTaskRequest
func (_e *ModelisationServiceInterface_Expecter) UpdateTask(taskId interface{}, requestTask interface{}) *ModelisationServiceInterface_UpdateTask_Call {
	return &ModelisationServiceInterface_UpdateTask_Call{Call: _e.mock.On("UpdateTask", taskId, requestTask)}
}

func (_c *ModelisationServiceInterface_UpdateTask_Call) Run(run func(taskId uint64, requestTask req.UpdateTaskRequest)) *ModelisationServiceInterface_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint64), args[1].(req.UpdateTaskRequest))
	})
	return _c
}

func (_c *ModelisationServiceInterface_UpdateTask_Call) Return(taskUpdated models.Task, err error) *ModelisationServiceInterface_UpdateTask_Call {
	_c.Call.Return(taskUpdated, err)
	return _c
}

func (_c *ModelisationServiceInterface_UpdateTask_Call) RunAndReturn(run func(uint64, req.UpdateTaskRequest) (models.Task, error)) *ModelisationServiceInterface_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewModelisationServiceInterface creates a new instance of ModelisationServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewModelisationServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ModelisationServiceInterface {
	mock := &ModelisationServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
